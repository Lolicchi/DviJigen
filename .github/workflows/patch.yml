name: DviJigen
on:
  workflow_dispatch:
env:
  cache: ${{ github.workspace }}/cache/
  name: 4.3-stable
jobs:
  compile:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: godotengine/godot
        ref: ${{ env.name }}
        submodules: recursive
    - uses: actions/cache/restore@v4
      with:
        path: ${{ env.cache }}
        key: ${{ env.name }}
      continue-on-error: true
    - run: |
        foreach (
          $file in ('customs.py', 'target = ''editor''
        use_mingw = ''yes''
        use_llvm = ''yes''
        production = ''yes''
        lto = ''full''
        optimize = ''speed_trace''
        module_text_server_adv_enabled = ''no''
        module_text_server_fb_enabled = ''yes''
        deprecated = ''no''
        precision = ''double''
        xaudio2 = ''yes''
        warnings = ''extra''
        extra_suffix = ''${{ github.repository }}''.split(''/'')[-1]
        use_precise_math_checks = ''yes''
        steamapi = ''yes''
        target_win_version = ''0x0a00''
        windows_subsystem = ''console''
        use_static_cpp = ''no''
        use_asan = ''yes'''),
          ('a', 'a')
        ) { out-file ./$($file[0]) -noclobber -inputobject ($file[1] -replace [Environment]::NewLine, "`n") }
    - run: |
        foreach (
          $file in @{
            'scene/2d/physics/collision_object_2d.h' = , (
              'class CollisionObject2D : public Node2D {
        	GDCLASS(CollisionObject2D, Node',
               'class Entity2D : public Node2D {
        	GDCLASS(Entity2D, Node2D);
        
        private:
          String entity_name;
        
        protected:
        	static void _bind_methods();

        public:
        	void set_entity_name(const String &p_string);
        	String get_entity_name() const;

        	Entity2D();
        	~Entity2D();
        };

        class CollisionObject2D : public Entity2D {
        	GDCLASS(CollisionObject2D, Entity'
            )
            'scene/2d/physics/collision_object_2d.cpp' = , (
              '#include "scene/resources/world_2d.h"',
              '#include "scene/resources/world_2d.h"
        
        void Entity2D::set_entity_name(const String &p_string) {
        	entity_name = p_string;
        }
        
        String Entity2D::get_entity_name() const {
        	return entity_name;
        }
        
        	ClassDB::bind_method(D_METHOD("set_entity_name", "entity"), &Entity2D::set_entity_name);
        	ClassDB::bind_method(D_METHOD("get_entity_name"), &Entity2D::get_entity_name);
        
        	ADD_GROUP("Entity", "entity_");
        	ADD_PROPERTY(PropertyInfo(Variant::STRING, "entity_name", PROPERTY_HINT_MULTILINE_TEXT), "set_entity_name", "get_entity_name");
        }
        
        Entity2D::Entity2D() {}
        
        Entity2D::~Entity2D() {}'
            )
            'scene/register_scene_types.cpp' = , (
              'CollisionObject',
              'Entity2D);
        	GDREGISTER_ABSTRACT_CLASS(CollisionObject'
            )
            
          }.getenumerator()
        ) {
          $content = get-content $file.key -raw
          for ($i = 0; $i -lt $file.value.length; $i++) {
            $file.value[$i][0]
            $content = $content -replace $file.value[$i][0], $file.value[$i][1]
          }
          set-content $file.key $content
        }
    - run: |
        invoke-expression (invoke-restmethod -uri https://get.scoop.sh)
        scoop install gcc python scons make mingw
        scons --help
        scons use_mingw=yes production=yes lto=full optimize=speed_trace module_text_server_adv_enabled=no module_text_server_fb_enabled=yes deprecated=no precision=double xaudio2=no warnings=extra extra_suffix=dvijigen use_precise_math_checks=yes steamapi=yes target_win_version=0x0a00 windows_subsystem=console use_static_cpp=no use_asan=yes
    - uses: actions/cache/save@v4
      with:
        path: ${{ env.cache }}
        key: ${{ env.name }}
      continue-on-error: true
    - run: remove-item bin/* -include *.exp,*.lib,*.pdb -force
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.name }}
        path: bin/*
