name: dvijigen
on:
  workflow_dispatch:
env:
  SCONS_CACHE: cache
  SCONS_CACHE_LIMIT: 4096
  GODOT_BASE_BRANCH: 4.3
  args: platform target arch dev_build optimize=speed_trace debug_symbols separate_debug_symbols debug_paths_relative lto=full production=yes threads deprecated=no precision=double minizip brotli xaudio2 vulkan opengl3 d3d12 openxr=no use_volk disable_exceptions custom_modules custom_modules_recursive dev_mode tests fast_unsafe ninja compiledb verbose progress warnings=extra werror extra_suffix=${{ github.workflow }} object_prefix=${{ github.workflow }} vsproj vsproj_name import_env_vars disable_3d disable_advanced_gui build_profile modules_enabled_by_default no_editor_splash system_certs_path use_precise_math_checks=yes scu_build scu_limit engine_update_check steamapi=yes builtin_brotli builtin_certs builtin_clipper2 builtin_embree builtin_enet builtin_freetype builtin_msdfgen builtin_glslang builtin_graphite builtin_harfbuzz builtin_icu4c builtin_libogg builtin_libpng builtin_libtheora builtin_libvorbis builtin_libwebp builtin_wslay builtin_mbedtls builtin_miniupnpc builtin_openxr=no builtin_pcre2 builtin_pcre2_with_jit builtin_recastnavigation builtin_rvo2_2d builtin_rvo2_3d builtin_squish builtin_xatlas builtin_zlib builtin_zstd CXX CC LINK cppdefines ccflags cxxflags cflags linkflags asflags arflags rcflags mingw_prefix target_win_version=0x0a00 windows_subsystem=console msvc_version use_mingw=yes use_llvm use_static_cpp=no use_asan=yes debug_crt incremental_link silence_msvc angle_libs mesa_libs agility_sdk_path agility_sdk_multiarch use_pix pix_path module_astcenc_enabled module_basis_universal_enabled module_bmp_enabled module_camera_enabled=no module_csg_enabled module_cvtt_enabled module_dds_enabled module_enet_enabled module_etcpak_enabled module_fbx_enabled module_freetype_enabled module_gdscript_enabled module_glslang_enabled module_gltf_enabled module_gridmap_enabled module_hdr_enabled module_interactive_music_enabled module_jpg_enabled module_jsonrpc_enabled module_ktx_enabled module_lightmapper_rd_enabled module_mbedtls_enabled module_meshoptimizer_enabled module_minimp3_enabled minimp3_extra_formats module_mobile_vr_enabled module_mono_enabled module_msdfgen_enabled module_multiplayer_enabled module_navigation_enabled module_noise_enabled module_ogg_enabled module_openxr_enabled=no module_raycast_enabled module_regex_enabled module_squish_enabled module_svg_enabled module_text_server_adv_enabled=no graphite module_text_server_fb_enabled=yes module_tga_enabled module_theora_enabled module_tinyexr_enabled module_upnp_enabled module_vhacd_enabled module_vorbis_enabled module_webp_enabled module_webrtc_enabled=no module_websocket_enabled module_webxr_enabled=no module_xatlas_unwrap_enabled module_zip_enabled
jobs:
  compile:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: godotengine/godot
        ref: ${{ env.GODOT_BASE_BRANCH }}
        submodules: recursive
    - uses: ./.github/actions/godot-cache-restore
      with:
        scons-cache: ${{ env.SCONS_CACHE }}
      continue-on-error: true
    - run: |
        foreach ($file in
          ('scene/2d/physics/entity_2d.h', '#ifndef ENTITY_2D_H
        #define ENTITY_2D_H

        #include "scene/2d/node_2d.h"

        class Entity2D : public Node2D {
        	GDCLASS(Entity2D, Node2D);

        private:
          String entity_name;

        protected:
        	static void _bind_methods();

        public:
        	void set_entity_name(const String &p_string);
        	String get_entity_name() const;

        	Entity2D();
        	~Entity2D();
        };

        #endif // Entity_2D_H'),
        ('scene/2d/physics/entity_2d.cpp', '#include "entity_2d.h"

        void Entity2D::set_entity_name(const String &p_string) {
        	entity_name = p_string;
        }

        String Entity2D::get_entity_name() const {
        	return entity_name;
        }

        void Entity2D::_bind_methods() {
        	ClassDB::bind_method(D_METHOD("set_entity_name", "entity"), &Entity2D::set_entity_name);
        	ClassDB::bind_method(D_METHOD("get_entity_name"), &Entity2D::get_entity_name);

        	ADD_GROUP("Entity", "entity_");
        	ADD_PROPERTY(PropertyInfo(Variant::STRING, "entity_name", PROPERTY_HINT_MULTILINE_TEXT), "set_entity_name", "get_entity_name");
        }

        Entity2D::Entity2D() {}

        Entity2D::~Entity2D() {}')
        ) { out-file ./$($file[0]) -noclobber -inputobject ($file[1] -replace [Environment]::NewLine, "`n") }
        foreach (
          $file in @{
            'scene/2d/physics/collision_object_2d.h' = ('node', 'physics/entity'), ('Node', 'Entity')
            'scene/register_scene_types.cpp' = , ('CollisionObject', 'Entity2D);
        	GDREGISTER_ABSTRACT_CLASS(CollisionObject')
          }.getenumerator()
        ) {
          $content = get-content $file.key -raw
          for ($i = 0; $i -lt $file.value.length; $i++) {
            $content = $content -creplace [Regex]::Escape(($file.value[$i][0] -replace [Environment]::NewLine, "`n")), ($file.value[$i][1] -replace [Environment]::NewLine, "`n")
          }
          set-content $file.key $content
        }
        invoke-expression (invoke-restmethod -uri https://get.scoop.sh)
        scoop install gcc python scons make mingw
        $args = foreach ($arg in '${{ env.args }}' -split ' ') { ($arg -split '=')[0] }
        $opts = (out-string -inputobject (scons --help)) -split ([Environment]::NewLine + [Environment]::NewLine)
        $opts = $opts[1..$opts.length]
        for ($i = 0; $i -lt $opts.length; $i++) {
          $opts[$i].startswith($args[$i])
          $args[$i]
          $opts[$i]
        }
        scons ${{ env.args }} --help
        scons ${{ env.args }}
    - uses: ./.github/actions/godot-cache-save
      with:
        scons-cache: ${{ env.SCONS_CACHE }}
      continue-on-error: true
    - run: remove-item bin/* -include *.exp,*.lib,*.pdb -force
    - uses: ./.github/actions/upload-artifact
      with:
        name: ${{ env.GODOT_BASE_BRANCH }}
