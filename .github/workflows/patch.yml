name: dvijigen
on:
  workflow_dispatch:
env:
  SCONS_CACHE: .cache/
  SCONS_CACHE_LIMIT: 4096
  GODOT_BASE_BRANCH: 4.3
  args: platform=windows target=editor arch=x86_64 dev_build=no optimize=speed_trace debug_symbols=no separate_debug_symbols=no debug_paths_relative=no lto=full production=yes threads=yes deprecated=no precision=double minizip=yes brotli=yes xaudio2=no vulkan=yes opengl3=yes d3d12=no openxr=no use_volk=yes disable_exceptions=yes custom_modules= custom_modules_recursive=yes dev_mode=no tests=no fast_unsafe=no ninja=no compiledb=no verbose=no progress=yes warnings=extra werror=no extra_suffix=${{ github.workflow }} object_prefix= vsproj=no vsproj_name= import_env_vars= disable_3d=no disable_advanced_gui=no build_profile= modules_enabled_by_default=yes no_editor_splash=yes system_certs_path= use_precise_math_checks=yes scu_build=no scu_limit= engine_update_check=yes steamapi=yes builtin_brotli=yes builtin_certs=yes builtin_clipper2=yes builtin_embree=yes builtin_enet=yes builtin_freetype=yes builtin_msdfgen=yes builtin_glslang=yes builtin_graphite=yes builtin_harfbuzz=yes builtin_icu4c=yes builtin_libogg=yes builtin_libpng=yes builtin_libtheora=yes builtin_libvorbis=yes builtin_libwebp=yes builtin_wslay=yes builtin_mbedtls=yes builtin_miniupnpc=yes builtin_openxr=yes builtin_pcre2=yes builtin_pcre2_with_jit=yes builtin_recastnavigation=yes builtin_rvo2_2d=yes builtin_rvo2_3d=yes builtin_squish=yes builtin_xatlas=yes builtin_zlib=yes builtin_zstd=yes CXX= CC= LINK= cppdefines= ccflags= cxxflags= cflags= linkflags= asflags= arflags= rcflags= mingw_prefix= target_win_version=0x0a00 windows_subsystem=console msvc_version= use_mingw=yes use_llvm=no use_static_cpp=no use_asan=yes debug_crt=no incremental_link=no silence_msvc=yes angle_libs= mesa_libs= agility_sdk_path= agility_sdk_multiarch=no use_pix=no pix_path= module_astcenc_enabled=yes module_basis_universal_enabled=yes module_bmp_enabled=yes module_camera_enabled=no module_csg_enabled=yes module_cvtt_enabled=yes module_dds_enabled=yes module_enet_enabled=yes module_etcpak_enabled=yes module_fbx_enabled=yes module_freetype_enabled=yes module_gdscript_enabled=yes module_glslang_enabled=yes module_gltf_enabled=yes module_gridmap_enabled=yes module_hdr_enabled=yes module_interactive_music_enabled=yes module_jpg_enabled=yes module_jsonrpc_enabled=yes module_ktx_enabled=yes module_lightmapper_rd_enabled=yes module_mbedtls_enabled=yes module_meshoptimizer_enabled=yes module_minimp3_enabled=yes minimp3_extra_formats=no module_mobile_vr_enabled=no module_mono_enabled=no module_msdfgen_enabled=yes module_multiplayer_enabled=yes module_navigation_enabled=yes module_noise_enabled=yes module_ogg_enabled=yes module_openxr_enabled=no module_raycast_enabled=yes module_regex_enabled=yes module_squish_enabled=yes module_svg_enabled=yes module_text_server_adv_enabled=no graphite=yes module_text_server_fb_enabled=yes module_tga_enabled=yes module_theora_enabled=yes module_tinyexr_enabled=yes module_upnp_enabled=yes module_vhacd_enabled=yes module_vorbis_enabled=yes module_webp_enabled=yes module_webrtc_enabled=yes module_websocket_enabled=yes module_webxr_enabled=no module_xatlas_unwrap_enabled=yes module_zip_enabled=yes
jobs:
  compile:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: godotengine/godot
        ref: ${{ env.GODOT_BASE_BRANCH }}
        submodules: recursive
    - uses: ./.github/actions/godot-cache-restore
      with:
        scons-cache: ${{ env.SCONS_CACHE }}
      continue-on-error: true
    - run: |
        foreach ($file in
          ('scene/2d/physics/entity_2d.h', '#ifndef ENTITY_2D_H
        #define ENTITY_2D_H

        #include "scene/2d/node_2d.h"

        class Entity2D : public Node2D {
        	GDCLASS(Entity2D, Node2D);

        private:
          String entity_name;

        protected:
        	static void _bind_methods();

        public:
        	void set_entity_name(const String &p_string);
        	String get_entity_name() const;

        	Entity2D();
        	~Entity2D();
        };

        #endif // Entity_2D_H'),
        ('scene/2d/physics/entity_2d.cpp', '#include "entity_2d.h"

        void Entity2D::set_entity_name(const String &p_string) {
        	entity_name = p_string;
        }

        String Entity2D::get_entity_name() const {
        	return entity_name;
        }

        void Entity2D::_bind_methods() {
        	ClassDB::bind_method(D_METHOD("set_entity_name", "entity"), &Entity2D::set_entity_name);
        	ClassDB::bind_method(D_METHOD("get_entity_name"), &Entity2D::get_entity_name);

        	ADD_GROUP("Entity", "entity_");
        	ADD_PROPERTY(PropertyInfo(Variant::STRING, "entity_name", PROPERTY_HINT_MULTILINE_TEXT), "set_entity_name", "get_entity_name");
        }

        Entity2D::Entity2D() {}

        Entity2D::~Entity2D() {}')
        ) { out-file ./$($file[0]) -noclobber -inputobject ($file[1] -replace [Environment]::NewLine, "`n") }
        foreach (
          $file in @{
            'scene/2d/physics/collision_object_2d.h' = ('node', 'physics/entity'), ('Node', 'Entity')
            'scene/register_scene_types.cpp' = , ('CollisionObject', 'Entity2D);
        	GDREGISTER_ABSTRACT_CLASS(CollisionObject')
          }.getenumerator()
        ) {
          $content = get-content $file.key -raw
          for ($i = 0; $i -lt $file.value.length; $i++) {
            $content = $content -creplace [Regex]::Escape(($file.value[$i][0] -replace [Environment]::NewLine, "`n")), ($file.value[$i][1] -replace [Environment]::NewLine, "`n")
          }
          set-content $file.key $content
        }
        invoke-expression (invoke-restmethod -uri https://get.scoop.sh)
        scoop install gcc python scons make mingw
        $args = foreach ($arg in '${{ env.args }}' -split ' ') { ($arg -split '=')[0] }
        $opts = (out-string -inputobject (scons --help)) -split ([Environment]::NewLine + [Environment]::NewLine)
        $opts = $opts[1..($opts.length - 2)]
        for ($i = 0; $i -lt $opts.length; $i++) {
          $opts[$i].startswith($args[$i])
        }
        scons ${{ env.args }} --help
        scons ${{ env.args }}
    - uses: ./.github/actions/godot-cache-save
      with:
        scons-cache: ${{ env.SCONS_CACHE }}
      continue-on-error: true
    - run: remove-item bin/* -include *.exp,*.lib,*.pdb -force
    - uses: ./.github/actions/upload-artifact
      with:
        name: ${{ env.GODOT_BASE_BRANCH }}
