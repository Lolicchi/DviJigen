name: dvijigen
on:
  workflow_dispatch:
env:
  SCONS_CACHE: cache
  SCONS_CACHE_LIMIT: 4096
  GODOT_BASE_BRANCH: 4.3
  args: >
    platform=windows
    target=editor
    arch=x86_64
    dev_build=no
    optimize=speed_trace
    debug_symbols=no
    separate_debug_symbols=no
    debug_paths_relative=no
    lto=full
    production=yes
    threads=yes
    deprecated=no
    precision=double
    minizip=yes
    brotli=yes
    xaudio2=no
    vulkan=yes
    opengl3=yes
    d3d12=no
    openxr=no
    use_volk=yes
    disable_exceptions=yes
jobs:
  compile:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: godotengine/godot
        ref: ${{ env.GODOT_BASE_BRANCH }}
        submodules: recursive
    - uses: ./.github/actions/godot-cache-restore
      with:
        scons-cache: ${{ env.SCONS_CACHE }}
      continue-on-error: true
    - run: |
        foreach ($file in
          ('scene/2d/physics/entity_2d.h', '#ifndef ENTITY_2D_H
        #define ENTITY_2D_H

        #include "scene/2d/node_2d.h"

        class Entity2D : public Node2D {
        	GDCLASS(Entity2D, Node2D);

        private:
          String entity_name;

        protected:
        	static void _bind_methods();

        public:
        	void set_entity_name(const String &p_string);
        	String get_entity_name() const;

        	Entity2D();
        	~Entity2D();
        };

        #endif // Entity_2D_H'),
        ('scene/2d/physics/entity_2d.cpp', '#include "entity_2d.h"

        void Entity2D::set_entity_name(const String &p_string) {
        	entity_name = p_string;
        }

        String Entity2D::get_entity_name() const {
        	return entity_name;
        }

        void Entity2D::_bind_methods() {
        	ClassDB::bind_method(D_METHOD("set_entity_name", "entity"), &Entity2D::set_entity_name);
        	ClassDB::bind_method(D_METHOD("get_entity_name"), &Entity2D::get_entity_name);

        	ADD_GROUP("Entity", "entity_");
        	ADD_PROPERTY(PropertyInfo(Variant::STRING, "entity_name", PROPERTY_HINT_MULTILINE_TEXT), "set_entity_name", "get_entity_name");
        }

        Entity2D::Entity2D() {}

        Entity2D::~Entity2D() {}')
        ) { out-file ./$($file[0]) -noclobber -inputobject ($file[1] -replace [Environment]::NewLine, "`n") }
        foreach (
          $file in @{
            'scene/2d/physics/collision_object_2d.h' = ('node', 'physics/entity'), ('Node', 'Entity')
            'scene/register_scene_types.cpp' = , ('CollisionObject', 'Entity2D);
        	GDREGISTER_ABSTRACT_CLASS(CollisionObject')
          }.getenumerator()
        ) {
          $content = get-content $file.key -raw
          for ($i = 0; $i -lt $file.value.length; $i++) {
            $content = $content -creplace [Regex]::Escape(($file.value[$i][0] -replace [Environment]::NewLine, "`n")), ($file.value[$i][1] -replace [Environment]::NewLine, "`n")
          }
          set-content $file.key $content
        }
        invoke-expression (invoke-restmethod -uri https://get.scoop.sh)
        scoop install gcc python scons make mingw
        $args = foreach ($arg in '${{ env.args }}' -split ' ') { ($arg -split '=')[0] }
        $opts = (out-string -inputobject (scons --help)) -split ([Environment]::NewLine + [Environment]::NewLine)
        $opts = $opts[1..($opts.length - 2)]
        for ($i = 0; $i -lt $opts.length; $i++) {
          $opts[$i].startswith($args[$i])
        }
        scons ${{ env.args }} --help
        scons ${{ env.args }}
    - uses: ./.github/actions/godot-cache-save
      with:
        scons-cache: ${{ env.SCONS_CACHE }}
      continue-on-error: true
    - run: remove-item bin/* -include *.exp,*.lib,*.pdb -force
    - uses: ./.github/actions/upload-artifact
      with:
        name: ${{ env.GODOT_BASE_BRANCH }}
